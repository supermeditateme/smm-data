{"version":3,"file":"SegmentCanvas.js","sources":["../../../../../js/lib/components/Plot/SegmentCanvas.js"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Segment extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.canvasRender();\n  }\n\n  componentDidUpdate() {\n    this.canvasRender();\n  }\n\n  canvasRender() {\n    const { visibleChannels, segment30s, stepWidthOptions } = this.props;\n\n    if (!segment30s) {\n      return;\n    }\n\n    const { height } = this.props;\n    const signalHeight = height / visibleChannels.length;\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    let currentSignal = 0;\n\n    for (let signalMeta of visibleChannels) {\n      if (signalMeta.invalid) {\n        currentSignal++;\n        continue;\n      }\n\n      let signal =\n        signalMeta.type === 'derived'\n          ? signalMeta.signals[0]\n          : signalMeta.signal; // TODO\n\n      let signalStartY = signalHeight * currentSignal + signalHeight / 2;\n\n      ctx.beginPath();\n      ctx.moveTo(0, signalStartY);\n\n      const data = segment30s[signal.label];\n      const dataLength = data.length;\n      const stepWidthOption = stepWidthOptions[signal.sampleRate];\n\n      for (let j = 0; j < dataLength; j++) {\n        ctx.lineTo(stepWidthOption[j], signalStartY + data[j]);\n      }\n\n      ctx.moveTo(0, signalStartY);\n      ctx.closePath();\n      if (signalMeta.color && signalMeta.color !== 'black') {\n        ctx.strokeStyle = signalMeta.color;\n        ctx.stroke();\n        ctx.strokeStyle = '#000000';\n      } else {\n        ctx.stroke();\n      }\n\n      currentSignal++;\n    }\n  }\n\n  render() {\n    const { segWidth, height } = this.props;\n\n    return (\n      <canvas\n        className=\"plotCanvas\"\n        ref={this.canvasRef}\n        width={segWidth}\n        height={height}\n      />\n    );\n  }\n}\n\nexport default Segment;\n"],"names":["Segment","props","canvasRef","React","createRef","canvasRender","visibleChannels","segment30s","stepWidthOptions","height","signalHeight","length","canvas","current","ctx","getContext","clearRect","width","currentSignal","signalMeta","invalid","signal","type","signals","signalStartY","beginPath","moveTo","data","label","dataLength","stepWidthOption","sampleRate","j","lineTo","closePath","color","strokeStyle","stroke","segWidth","PureComponent"],"mappings":";;;;;;;;;;;;;;;IAEMA;;;mBACQC,KAAZ,EAAmB;;;kHACXA,KADW;;UAGZC,SAAL,GAAiBC,eAAMC,SAAN,EAAjB;;;;;;wCAGkB;WACbC,YAAL;;;;yCAGmB;WACdA,YAAL;;;;mCAGa;mBAC6C,KAAKJ,KADlD;UACLK,eADK,UACLA,eADK;UACYC,UADZ,UACYA,UADZ;UACwBC,gBADxB,UACwBA,gBADxB;;;UAGT,CAACD,UAAL,EAAiB;;;;UAITE,MAPK,GAOM,KAAKR,KAPX,CAOLQ,MAPK;;UAQPC,eAAeD,SAASH,gBAAgBK,MAA9C;UACMC,SAAS,KAAKV,SAAL,CAAeW,OAA9B;UACMC,MAAMF,OAAOG,UAAP,CAAkB,IAAlB,CAAZ;;UAEIC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBJ,OAAOK,KAA3B,EAAkCL,OAAOH,MAAzC;;UAEIS,gBAAgB,CAApB;;;;;;;6BAEuBZ,eAAvB,8HAAwC;cAA/Ba,UAA+B;;cAClCA,WAAWC,OAAf,EAAwB;;;;;cAKpBC,SACFF,WAAWG,IAAX,KAAoB,SAApB,GACIH,WAAWI,OAAX,CAAmB,CAAnB,CADJ,GAEIJ,WAAWE,MAHjB,CANsC;;cAWlCG,eAAed,eAAeQ,aAAf,GAA+BR,eAAe,CAAjE;;cAEIe,SAAJ;cACIC,MAAJ,CAAW,CAAX,EAAcF,YAAd;;cAEMG,OAAOpB,WAAWc,OAAOO,KAAlB,CAAb;cACMC,aAAaF,KAAKhB,MAAxB;cACMmB,kBAAkBtB,iBAAiBa,OAAOU,UAAxB,CAAxB;;eAEK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,UAApB,EAAgCG,GAAhC,EAAqC;gBAC/BC,MAAJ,CAAWH,gBAAgBE,CAAhB,CAAX,EAA+BR,eAAeG,KAAKK,CAAL,CAA9C;;;cAGEN,MAAJ,CAAW,CAAX,EAAcF,YAAd;cACIU,SAAJ;cACIf,WAAWgB,KAAX,IAAoBhB,WAAWgB,KAAX,KAAqB,OAA7C,EAAsD;gBAChDC,WAAJ,GAAkBjB,WAAWgB,KAA7B;gBACIE,MAAJ;gBACID,WAAJ,GAAkB,SAAlB;WAHF,MAIO;gBACDC,MAAJ;;;;;;;;;;;;;;;;;;;;;;6BAOG;oBACsB,KAAKpC,KAD3B;UACCqC,QADD,WACCA,QADD;UACW7B,MADX,WACWA,MADX;;;aAILN;mBACY,YADZ;aAEO,KAAKD,SAFZ;eAGSoC,QAHT;gBAIU7B;QALZ;;;;;EAxEkB8B;;;;"}