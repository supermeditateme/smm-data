{"version":3,"file":"edfStreamReader.js","sources":["../../../../../js/lib/core/edf/edfStreamReader.js"],"sourcesContent":["import Edf from './edf';\nimport FunnelBuffer from './funnelBuffer';\nimport ArrBuffer from './arrBuffer';\n\n// Source can be either Response object supporting Stream API, or ArrayBuffer\nfunction reader(source, callback, header) {\n  let stream;\n\n  switch (true) {\n    case 'ReadableStream' in window && source instanceof ReadableStream:\n      stream = new FunnelBuffer(source.getReader());\n      break;\n    case source instanceof ArrayBuffer:\n      stream = new ArrBuffer(new Uint8Array(source));\n      break;\n    default:\n      throw new Error('Unsupported source for edfStreamReader');\n      break;\n  }\n\n  let index = 0;\n\n  return new Edf(stream, header).then(edf => {\n    const total = edf.header.dataRecordsNumber;\n\n    edf.readDataRecords(dataRecord => {\n      callback(dataRecord, index, total, edf.header);\n      index += 1;\n    });\n\n    return edf.header;\n  });\n}\n\nexport default reader;\n"],"names":["reader","source","callback","header","stream","window","ReadableStream","FunnelBuffer","getReader","ArrayBuffer","ArrBuffer","Uint8Array","Error","index","Edf","then","total","edf","dataRecordsNumber","readDataRecords","dataRecord"],"mappings":";;;;;;AAIA;AACA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0C;MACpCC,eAAJ;;UAEQ,IAAR;SACO,oBAAoBC,MAApB,IAA8BJ,kBAAkBK,cAArD;eACW,IAAIC,kBAAJ,CAAiBN,OAAOO,SAAP,EAAjB,CAAT;;SAEGP,kBAAkBQ,WAAvB;eACW,IAAIC,kBAAJ,CAAc,IAAIC,UAAJ,CAAeV,MAAf,CAAd,CAAT;;;YAGM,IAAIW,KAAJ,CAAU,wCAAV,CAAN;;;;MAIAC,QAAQ,CAAZ;;SAEO,IAAIC,kBAAJ,CAAQV,MAAR,EAAgBD,MAAhB,EAAwBY,IAAxB,CAA6B,eAAO;QACnCC,QAAQC,IAAId,MAAJ,CAAWe,iBAAzB;;QAEIC,eAAJ,CAAoB,sBAAc;eACvBC,UAAT,EAAqBP,KAArB,EAA4BG,KAA5B,EAAmCC,IAAId,MAAvC;eACS,CAAT;KAFF;;WAKOc,IAAId,MAAX;GARK,CAAP;;;;;"}