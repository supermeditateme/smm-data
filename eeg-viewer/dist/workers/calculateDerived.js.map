{"version":3,"file":"calculateDerived.js","sources":["../../js/lib/workers/calculateDerived.js"],"sourcesContent":["// Synchronous pure function that calculates derived data.\n\n// TODO code copypasted from `selectors/viewMode.js`. Solve imports for webworkers!\nconst standardChannelNames = [\n  'fp1',\n  'fp2',\n  'f3',\n  'f4',\n  'c3',\n  'c4',\n  'p3',\n  'p4',\n  'o1',\n  'o2',\n  'f7',\n  'f8',\n  't3',\n  't4',\n  't5',\n  't6',\n  'a1',\n  'a2',\n  'fz',\n  'cz',\n  'pz',\n  'f9',\n  'f10',\n  't9',\n  't10',\n  'p9',\n  'p10',\n  'ecg',\n];\n\nfunction normalizeLabel(label) {\n  if (standardChannelNames.includes(label.toLowerCase())) {\n    return label.toLowerCase();\n  }\n\n  const labelChunks = label\n    .replace('.', '')\n    .replace('-AA', '')\n    .replace(' - AA', '')\n    .split(' ');\n  return (labelChunks[labelChunks.length - 1] || label).toLowerCase();\n}\n\nexport default function calculateCoordinates(\n  dataSegment,\n  signals,\n  derivedChannels\n) {\n  const result = {};\n\n  let cursor = 0;\n  signals.forEach(function(signal, i) {\n    const signalSegment = new Int16Array(signal.sampleRate * 30);\n    for (let j = 0; j < 30; j++) {\n      const dataRecord = dataSegment[j];\n      if (!dataRecord) {\n        if (process.env.NODE_ENV === 'development') {\n          console.warn(\n            `No dataRecord found at index ${j}; probably last segment.`\n          );\n        }\n        break;\n      }\n      signalSegment.set(\n        dataRecord.subarray(cursor, cursor + signal.sampleRate),\n        j * signal.sampleRate\n      );\n    }\n\n    result[signal.label] = signalSegment;\n    cursor += signal.sampleRate;\n  });\n\n  for (let derivedChannel of derivedChannels) {\n    const [ch1, ch2] = derivedChannel.split('-');\n    const signal1 = signals.find(({ label }) => normalizeLabel(label) === ch1);\n    const signal2 = signals.find(({ label }) => normalizeLabel(label) === ch2);\n    if (!signal1 || !signal2) {\n      console.error(`Channels not found! ${ch1} , ${ch2}`);\n      result[derivedChannel] = new Int16Array(256 * 30); // Dummy\n      continue;\n    }\n    if (signal1.sampleRate !== signal2.sampleRate) {\n      throw new Error(`Sample rates do not match! ${ch1} , ${ch2}`);\n    }\n\n    const signalSegment = new Int16Array(signal1.sampleRate * 30);\n    const dataLength = signalSegment.length;\n    for (let i = 0; i < dataLength; i++) {\n      signalSegment[i] = result[signal1.label][i] - result[signal2.label][i];\n    }\n    result[derivedChannel] = signalSegment;\n  }\n\n  return result;\n}\n"],"names":["standardChannelNames","normalizeLabel","label","includes","toLowerCase","labelChunks","replace","split","length","calculateCoordinates","dataSegment","signals","derivedChannels","result","cursor","forEach","signal","i","signalSegment","Int16Array","sampleRate","j","dataRecord","process","set","subarray","derivedChannel","ch1","ch2","signal1","find","signal2","error","Error","dataLength","self","onmessage","msg","data","close","postMessage","apply"],"mappings":"icAGMA,sBACJ,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,OAGF,SAASC,eAAeC,MAClBF,qBAAqBG,SAASD,EAAME,sBAC/BF,EAAME,kBAGTC,EAAcH,EACjBI,QAAQ,IAAK,IACbA,QAAQ,MAAO,IACfA,QAAQ,QAAS,IACjBC,MAAM,YACDF,EAAYA,EAAYG,OAAS,IAAMN,GAAOE,cAGxD,SAASK,qBACPC,EACAC,EACAC,OAEMC,KAEFC,EAAS,IACLC,QAAQ,SAASC,EAAQC,WACzBC,EAAgB,IAAIC,WAA+B,GAApBH,EAAOI,YACnCC,EAAI,EAAGA,EAAI,GAAIA,IAAK,KACrBC,EAAaZ,EAAYW,OAC1BC,EAAY,CACXC,UAOQC,IACZF,EAAWG,SAASX,EAAQA,EAASE,EAAOI,YAC5CC,EAAIL,EAAOI,cAIRJ,EAAOd,OAASgB,KACbF,EAAOI,4BAGVM,SACYA,EAAenB,MAAM,2BAAjCoB,OAAKC,OACNC,EAAUlB,EAAQmB,KAAK,mBAAe7B,iBAAZC,SAAsCyB,IAChEI,EAAUpB,EAAQmB,KAAK,mBAAe7B,iBAAZC,SAAsC0B,QACjEC,IAAYE,iBACPC,6BAA6BL,QAASC,KACvCF,GAAkB,IAAIP,WAAW,oBAGtCU,EAAQT,aAAeW,EAAQX,iBAC3B,IAAIa,oCAAoCN,QAASC,WAGnDV,EAAgB,IAAIC,WAAgC,GAArBU,EAAQT,YACvCc,EAAahB,EAAcV,OACxBS,EAAI,EAAGA,EAAIiB,EAAYjB,MAChBA,GAAKJ,EAAOgB,EAAQ3B,OAAOe,GAAKJ,EAAOkB,EAAQ7B,OAAOe,KAE/DS,GAAkBR,sCAlBAN,gJAqBpBC,EAGTsB,KAAKC,UAAY,YACXC,EAAIC,KAAKC,mBAGNC,YAAY/B,qBAAqBgC,MAAM,KAAMJ,EAAIC"}